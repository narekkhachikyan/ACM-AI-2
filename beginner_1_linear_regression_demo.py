# -*- coding: utf-8 -*-
"""Beginner #1: Linear Regression Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I-d-YGNsmSj-Wj-opw0BKMlp4vjBP1r9
"""

# import
import numpy as np
from sklearn import datasets
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
import matplotlib.pyplot as plt

"""**Data Creation and Preprocessing**"""

num_data = 300
X = np.linspace(0, 50, num_data)
noise = 15 * np.random.randn(num_data)
y = 4 * X + 14 + noise

# Split and Preprocess Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True) # shuffle is set to True by default
X_train = X_train.reshape(-1, 1)
X_test = X_test.reshape(-1, 1)

# Visualize Data
plt.scatter(X_train, y_train, color='blue', label='Training', alpha=0.5)
plt.scatter(X_test, y_test, color='red', label='Testing', alpha=0.5)
plt.legend()

"""**Training the Model**"""

# Fit Model
model = LinearRegression().fit(X_train, y_train)

# Check Model's Params
print(f"Model weights: {model.coef_}")
print(f"Model bias: {model.intercept_}")

# Evaluate model on test data
r2 = model.score(X_test, y_test)
print(f"r2 score: {r2}")

# Compute MSE loss on test data
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)

print(f"Mean Squared Error: {mse}")

# Plot best fit line
plt.scatter(X_train, y_train, color='c', label='Training', alpha=0.5)
plt.scatter(X_test, y_test, color='royalblue', label='Testing', alpha=0.5)
X_axis = np.linspace(0, 50, num_data).reshape(-1, 1)
y_axis = model.predict(X_axis)
plt.plot(X_axis, y_axis, color='red', label='Fit')
plt.legend()

"""**Real Dataset with Higher Dimensions Example (Feel free to skip if running short on time)**"""

# Load Dataset
diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)

# Split Data
X_train, X_test, y_train, y_test = train_test_split(diabetes_X, diabetes_y, test_size=0.2, shuffle=True)

# Fit Model
diabetes_model = LinearRegression().fit(X_train, y_train)

# Check Model's Params
print(f"Model weights: {diabetes_model.coef_}")
print(f"Model bias: {diabetes_model.intercept_}")

# Evaluate model on test data
diabetes_r2 = diabetes_model.score(X_test, y_test)
print(f"r2 score: {diabetes_r2}")

# Compute MSE loss on test data
diabetes_pred = diabetes_model.predict(X_test)
diabetes_mse = mean_squared_error(y_test, diabetes_pred)
print(f"Mean Squared Error: {diabetes_mse}")

"""**Extension: If you want to try this out more, consider only looking at one of the ten input variables from this dataset. Then, you can plot the regression and get a picture of why this dataset isn't the best for linear regression.**"""